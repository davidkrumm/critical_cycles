'''
This file contains SAGE code used for calculations in Section 5.1. This includes:
 - Finding instances of portraits in Figure 3 (starting on line 7).
 - Proof of Proposition 5.1 (line 51)
'''

# Construct instances of the portraits I1, I2, I3, F1, F2.

P.<x,y> = ProjectiveSpace(QQ, 1)

c = 2
phi1 = (c + c^2 - c^3)*x*y - c^2*y^2
phi2 = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi = DynamicalSystem_projective([phi1,phi2])
I1 = phi.rational_preperiodic_graph()
p = I1.graphplot(vertex_labels=False,vertex_size=140,loop_size=.12)
p.show()

c = -11/3
phi1 = (c + c^2 - c^3)*x*y - c^2*y^2
phi2 = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi = DynamicalSystem_projective([phi1,phi2])
I2 = phi.rational_preperiodic_graph()
p = I2.graphplot(vertex_labels=False,vertex_size=140,loop_size=.12)
p.show()

c = 3/2
phi1 = (c + c^2 - c^3)*x*y - c^2*y^2
phi2 = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi = DynamicalSystem_projective([phi1,phi2])
I3 = phi.rational_preperiodic_graph()
p = I3.graphplot(vertex_labels=False,vertex_size=140,loop_size=.12)
p.show()

c = 1/6
phi1 = (c + c^2 - c^3)*x*y - c^2*y^2
phi2 = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi = DynamicalSystem_projective([phi1,phi2])
F1 = phi.rational_preperiodic_graph()
p = F1.graphplot(vertex_labels=False,vertex_size=140,loop_size=.12)
p.show()

c = 5/2
phi1 = (c + c^2 - c^3)*x*y - c^2*y^2
phi2 = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi = DynamicalSystem_projective([phi1,phi2])
F2 = phi.rational_preperiodic_graph()
p = F2.graphplot(vertex_labels=False,vertex_size=140,loop_size=.12)
p.show()

### Proof of Proposition 5.1 ###

'''
For maps phi_c with height of c at most 200,
attempt to find portraits G(\phi_c,Q) different from the known five.
'''

known_graphs = [I1,I2,I3,F1,F2]
new_graphs = []

for c in QQ.range_by_height(2,10):
	phi1 = (c + c^2 - c^3)*x*y - c^2*y^2
	phi2 = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
	phi = DynamicalSystem_projective([phi1,phi2])
	g = phi.rational_preperiodic_graph(prime_bound=100)
	if all([not g.is_isomorphic(I) for I in known_graphs]):
		new_graphs.append(g)

# No new graphs are found.

len(new_graphs) # 0
