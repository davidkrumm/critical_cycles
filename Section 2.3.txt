''' 
This file contains SAGE code used for calculations in Section 2.3. This includes:
 - Proof of Proposition 2.6 (starting on line 10)
 - Proof of Proposition 2.7 (line 52)
 - Proof of Proposition 2.8 (line 88)
 - Calculations for Remark 2.9 (line 129)
'''


### Proof of Proposition 2.6 ### 

# Compute the coordinates of the maps phi_c and psi_c using Hutz's sigma_invariants algorithm.
# Check whether the coordinates correspond to a point on the symmetry locus.

K.<c> = Frac(QQ['c'])
P.<x,y> = ProjectiveSpace(K, 1)
phi_c = DynamicalSystem_projective([c*x*y - c*y^2,x^2])
psi_c = DynamicalSystem_projective([2*x*y - y^2,c*x^2 - y^2])

# Check that phi_c must have trivial automorphism group.

phi_c.sigma_invariants(1) # [c - 6, -2*c + 12, c - 8]
r, s = c - 6, -2*c + 12 
-2*r^3 - r^2*s + r^2 + 8*r*s + 4*s^2 - 12*r - 12*s + 36  # c^2

# Check that psi_c must have nontrivial automorphism group.

psi_c.sigma_invariants(1) # [-6, 12, -8]
r, s = -6, 12 
-2*r^3 - r^2*s + r^2 + 8*r*s + 4*s^2 - 12*r - 12*s + 36  # 0

# Check that phi_c has one 2-periodic critical point, namely 0.

phi_c.critical_points() # [(0 : 1), (2 : 1)]

phi_c(phi_c(P(0))) # (0 : 1)

phi_c(phi_c(P(2))) # ((4*c - 16)/c : 1)

# Check that psi_c has two 2-periodic critical points.

_.<z> = K[]
F.<g> = K.extension(z^2 - c*(c - 4))
alpha = (c + g)/(2*c)
1 - alpha == (c - g)/(2*c) # True
P.<x,y> = ProjectiveSpace(F, 1)
psi_c = DynamicalSystem_projective([2*x*y - y^2,c*x^2 - y^2])
psi_c(P(alpha)) == P(1 - alpha)
psi_c(P(1 - alpha)) == P(alpha)


### Proof of Proposition 2.7 ### 

# Check that phi_{r,s} has a 3-periodic critical point.

K.<v> = Frac(QQ['v'])
P.<x,y> = ProjectiveSpace(K, 1)
r = -(v^3 - v^2 + 5*v + 1)/v
s = (v^3 - 2*v^2 + 7*v + 2)/v
f = 2*x^2 + (2 - r)*x*y + (2 - r)*y^2
g = -x^2 + (2 + r)*x*y + (2 - r - s)*y^2
phi_rs = DynamicalSystem_projective([f,g])
p, q = phi_rs.critical_points()
p # ((-v^2 - 3)/(v + 1) : 1)
q # ((v^3 - v^2 + 7*v + 1)/(v^2 - 2*v + 1) : 1)
phi_rs.nth_iterate(p,3) == p # True

# Conjugate phi_{r,s} to obtain phi_c

x0 = (- v^2 - 3)/(v + 1)
x1 = (- v^2 + 2*v - 1)/(v^2 + 1)
x2 = (2*v + 2)/(v^2 - v) 
z = (x2 - x1)/(x2 - x0)
M = matrix([[z,-x0*z], [1,-x1]]).inverse()
c = (v^2 + 1)/(v^3 + v)
phi_c = DynamicalSystem_projective([x^2 - (c + 1)*x*y + c*y^2,x^2])
phi_rs.conjugate(M) == phi_c # True

# Check that 0 is a 3-periodic critical point of phi_c.

K.<c> = Frac(QQ['c'])
P.<x,y> = ProjectiveSpace(K, 1)
phi_c = DynamicalSystem_projective([x^2 - (c + 1)*x*y + c*y^2,x^2])
phi_c.critical_points() # [(0 : 1), (2*c/(c + 1) : 1)]
phi_c.nth_iterate(P(0),3) == P(0) # True


### Proof of Proposition 2.8 ### 

# Check that phi_{r,s} has a 4-periodic critical point.

K.<v> = Frac(QQ['v'])
P.<x,y> = ProjectiveSpace(K, 1)
r = -(v^6 + v^5 + 2*v^4 + 3*v^3 - 2*v^2 - 5*v - 1)/(v*(v - 1)*(v + 1)^2)
s = (v^5 + 2*v^4 + 3*v^3 - 5*v - 2)/(v*(v^2 - 1));
f = 2*x^2 + (2 - r)*x*y + (2 - r)*y^2
g = -x^2 + (2 + r)*x*y + (2 - r - s)*y^2
phi_rs = DynamicalSystem_projective([f,g])
q, p = phi_rs.critical_points()
p # ((v^4 - v^2 + 2*v + 3)/(v^3 - 2*v - 1) : 1) 
phi_rs.nth_iterate(p,4) == p # True
phi_rs.nth_iterate(p,2) == p # False
phi_rs.nth_iterate(p,1) == p # False

# Conjugate phi_rs to obtain phi_c.

M1 = [-v^3 + 2*v + 1,v^4 - v^2 + 2*v + 3]
M2 = [(-v^5 - 2*v^4 + v^3 + 3*v^2 - 1)/v, (-3*v^4 - 2*v^3 + 5*v^2 + 4*v - 1)/v]
M = matrix([M1,M2]).inverse()
c = -v
f = (c^2 + c - c^3)*x*y - c^2*y^2
g = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi_c = DynamicalSystem_projective([f,g])
phi_rs.conjugate(M) == phi_c # True

# Check that 0 is a 4-periodic critical point of phi_c.

K.<c> = Frac(QQ['c'])
P.<x,y> = ProjectiveSpace(K, 1)
f = (c^2 + c - c^3)*x*y - c^2*y^2
g = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi_c = DynamicalSystem_projective([f,g])
phi_c.critical_points() # [(0 : 1), (-2*c/(c^2 - c - 1) : 1)]
phi_c.nth_iterate(P(0),4) == P(0) # True
phi_c.nth_iterate(P(0),2) == P(0) # False
phi_c.nth_iterate(P(0),1) == P(0) # False


### Calculations for Remark 2.9 ###

# Conjugate the maps from Proposition 2.8 to obtain phi_c as in the remark.

K.<c> = Frac(QQ['c'])
P.<x,y> = ProjectiveSpace(K, 1)
f = (c^2 + c - c^3)*x*y - c^2*y^2
g = (c^3 - c^2 - c + 1)*x^2 - (c^3 - c^2 - c)*x*y - c^2*y^2
phi_c = DynamicalSystem_projective([f,g])
a = c/(c + 1)
M = matrix([[1,0], [1,1/c-1]])
phi_a = DynamicalSystem_projective([a*x^2 + (a^2 - 3*a + 1)*x*y - (2*a^2 - 3*a + 1)*y^2,a*x^2])
phi_a == phi_c.conjugate(M) # True
